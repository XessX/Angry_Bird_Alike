        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX14.2.sdk/usr/include/c++/v1/stdlib.h
        -:    0:Graph:./CMakeFiles/test_run.dir/src/Entity.cpp.gcno
        -:    0:Data:./CMakeFiles/test_run.dir/src/Entity.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#if defined(__need_malloc_and_calloc)
        -:   11:
        -:   12:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   13:#  pragma GCC system_header
        -:   14:#endif
        -:   15:
        -:   16:#include_next <stdlib.h>
        -:   17:
        -:   18:#elif !defined(_LIBCPP_STDLIB_H)
        -:   19:#define _LIBCPP_STDLIB_H
        -:   20:
        -:   21:/*
        -:   22:    stdlib.h synopsis
        -:   23:
        -:   24:Macros:
        -:   25:
        -:   26:    EXIT_FAILURE
        -:   27:    EXIT_SUCCESS
        -:   28:    MB_CUR_MAX
        -:   29:    NULL
        -:   30:    RAND_MAX
        -:   31:
        -:   32:Types:
        -:   33:
        -:   34:    size_t
        -:   35:    div_t
        -:   36:    ldiv_t
        -:   37:    lldiv_t                                                               // C99
        -:   38:
        -:   39:double    atof (const char* nptr);
        -:   40:int       atoi (const char* nptr);
        -:   41:long      atol (const char* nptr);
        -:   42:long long atoll(const char* nptr);                                        // C99
        -:   43:double             strtod  (const char* restrict nptr, char** restrict endptr);
        -:   44:float              strtof  (const char* restrict nptr, char** restrict endptr); // C99
        -:   45:long double        strtold (const char* restrict nptr, char** restrict endptr); // C99
        -:   46:long               strtol  (const char* restrict nptr, char** restrict endptr, int base);
        -:   47:long long          strtoll (const char* restrict nptr, char** restrict endptr, int base); // C99
        -:   48:unsigned long      strtoul (const char* restrict nptr, char** restrict endptr, int base);
        -:   49:unsigned long long strtoull(const char* restrict nptr, char** restrict endptr, int base); // C99
        -:   50:int rand(void);
        -:   51:void srand(unsigned int seed);
        -:   52:void* calloc(size_t nmemb, size_t size);
        -:   53:void free(void* ptr);
        -:   54:void* malloc(size_t size);
        -:   55:void* realloc(void* ptr, size_t size);
        -:   56:void abort(void);
        -:   57:int atexit(void (*func)(void));
        -:   58:void exit(int status);
        -:   59:void _Exit(int status);
        -:   60:char* getenv(const char* name);
        -:   61:int system(const char* string);
        -:   62:void* bsearch(const void* key, const void* base, size_t nmemb, size_t size,
        -:   63:              int (*compar)(const void *, const void *));
        -:   64:void qsort(void* base, size_t nmemb, size_t size,
        -:   65:           int (*compar)(const void *, const void *));
        -:   66:int         abs(      int j);
        -:   67:long        abs(     long j);
        -:   68:long long   abs(long long j);                                             // C++0X
        -:   69:long       labs(     long j);
        -:   70:long long llabs(long long j);                                             // C99
        -:   71:div_t     div(      int numer,       int denom);
        -:   72:ldiv_t    div(     long numer,      long denom);
        -:   73:lldiv_t   div(long long numer, long long denom);                          // C++0X
        -:   74:ldiv_t   ldiv(     long numer,      long denom);
        -:   75:lldiv_t lldiv(long long numer, long long denom);                          // C99
        -:   76:int mblen(const char* s, size_t n);
        -:   77:int mbtowc(wchar_t* restrict pwc, const char* restrict s, size_t n);
        -:   78:int wctomb(char* s, wchar_t wchar);
        -:   79:size_t mbstowcs(wchar_t* restrict pwcs, const char* restrict s, size_t n);
        -:   80:size_t wcstombs(char* restrict s, const wchar_t* restrict pwcs, size_t n);
        -:   81:int at_quick_exit(void (*func)(void))                                     // C++11
        -:   82:void quick_exit(int status);                                              // C++11
        -:   83:void *aligned_alloc(size_t alignment, size_t size);                       // C11
        -:   84:
        -:   85:*/
        -:   86:
        -:   87:#include <__config>
        -:   88:
        -:   89:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   90:#  pragma GCC system_header
        -:   91:#endif
        -:   92:
        -:   93:#  if __has_include_next(<stdlib.h>)
        -:   94:#    include_next <stdlib.h>
        -:   95:#  endif
        -:   96:
        -:   97:#ifdef __cplusplus
        -:   98:extern "C++" {
        -:   99:// abs
        -:  100:
        -:  101:#ifdef abs
        -:  102:# undef abs
        -:  103:#endif
        -:  104:#ifdef labs
        -:  105:# undef labs
        -:  106:#endif
        -:  107:#ifdef llabs
        -:  108:# undef llabs
        -:  109:#endif
        -:  110:
        -:  111:// MSVCRT already has the correct prototype in <stdlib.h> if __cplusplus is defined
        -:  112:#if !defined(_LIBCPP_MSVCRT) && !defined(__sun__)
        -:  113:_LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY long abs(long __x) _NOEXCEPT {
        -:  114:  return __builtin_labs(__x);
        -:  115:}
        -:  116:_LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY long long abs(long long __x) _NOEXCEPT {
        -:  117:  return __builtin_llabs(__x);
        -:  118:}
        -:  119:#endif // !defined(_LIBCPP_MSVCRT) && !defined(__sun__)
        -:  120:
        -:  121:#if !defined(__sun__)
        -:  122:_LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY float abs(float __lcpp_x) _NOEXCEPT {
        -:  123:  return __builtin_fabsf(__lcpp_x); // Use builtins to prevent needing math.h
        -:  124:}
        -:  125:
        4:  126:_LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY double abs(double __lcpp_x) _NOEXCEPT {
        4:  127:  return __builtin_fabs(__lcpp_x);
        -:  128:}
        -:  129:
        -:  130:_LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY long double
        -:  131:abs(long double __lcpp_x) _NOEXCEPT {
        -:  132:  return __builtin_fabsl(__lcpp_x);
        -:  133:}
        -:  134:#endif // !defined(__sun__)
        -:  135:
        -:  136:// div
        -:  137:
        -:  138:#ifdef div
        -:  139:# undef div
        -:  140:#endif
        -:  141:#ifdef ldiv
        -:  142:# undef ldiv
        -:  143:#endif
        -:  144:#ifdef lldiv
        -:  145:# undef lldiv
        -:  146:#endif
        -:  147:
        -:  148:// MSVCRT already has the correct prototype in <stdlib.h> if __cplusplus is defined
        -:  149:#if !defined(_LIBCPP_MSVCRT) && !defined(__sun__) && !defined(_LIBCPP_ON_RTKIT)
        -:  150:inline _LIBCPP_INLINE_VISIBILITY ldiv_t div(long __x, long __y) _NOEXCEPT {
        -:  151:  return ::ldiv(__x, __y);
        -:  152:}
        -:  153:#if !(defined(__FreeBSD__) && !defined(__LONG_LONG_SUPPORTED))
        -:  154:inline _LIBCPP_INLINE_VISIBILITY lldiv_t div(long long __x,
        -:  155:                                             long long __y) _NOEXCEPT {
        -:  156:  return ::lldiv(__x, __y);
        -:  157:}
        -:  158:#endif
        -:  159:#endif // _LIBCPP_MSVCRT / __sun__
        -:  160:} // extern "C++"
        -:  161:#endif // __cplusplus
        -:  162:
        -:  163:#if defined(_LIBCPP_ON_DRIVERKIT)
        -:  164:# define EXIT_FAILURE 1
        -:  165:# define EXIT_SUCCESS 0
        -:  166:#endif
        -:  167:
        -:  168:// TODO: Remove this once DriverKit provides allocation functions in <stdlib.h>. rdar://84311130
        -:  169:#if defined(_LIBCPP_ON_DRIVERKIT)
        -:  170:extern "C" void free(void *);
        -:  171:extern "C" void* aligned_alloc(size_t, size_t);
        -:  172:extern "C" int posix_memalign(void **, size_t, size_t);
        -:  173:#endif
        -:  174:
        -:  175:#endif // _LIBCPP_STDLIB_H
